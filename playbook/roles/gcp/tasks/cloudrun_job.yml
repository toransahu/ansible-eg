---

# make sure the billing account is enabled & linked
- name: Enable APIs/Services on the project
  google.cloud.gcp_serviceusage_service:
    state: present
    name: "{{ item }}"
    project: "{{ gcp.project }}"
    auth_kind: "{{ gcp.auth_kind }}"
    service_account_file: "{{ gcp.service_account_file }}"
  loop:
    - compute.googleapis.com
    - run.googleapis.com
    - iam.googleapis.com # to use iam service for SA check and create
    - secretmanager.googleapis.com # to use secret service
    - cloudscheduler.googleapis.com # to create/run scheduler job
    - appengine.googleapis.com # for describe scheduler
    - cloudresourcemanager.googleapis.com # to manage project resource

- name: Set service account helper variables
  vars:
    version: "1"
    sa_key_secret_name: "cloudrun-sa-key"
    cloudrun_sa_user: "cloudrun"
    cloudrun_job_role: "cloudrunExecutor"
    cloudrun_job_id: "test-cloudrun-job"
  ansible.builtin.set_fact:
    sa_key_secret_name: "{{ sa_key_secret_name }}"
    cloudrun_sa_user: "{{ cloudrun_sa_user }}{{ version }}"
    cloudrun_sa_id: "{{ cloudrun_sa_user }}{{ version }}@{{ gcp.project }}.iam.gserviceaccount.com"
    cloudrun_job_role: "{{ cloudrun_job_role }}{{ version }}"
    cloudrun_job_id: "{{ cloudrun_job_id }}{{ version }}"

- name: Check if cloudrun SA key is already in GSM
  ansible.builtin.shell: |
    gcloud secrets versions list mysecret \
    --project={{ gcp.project }} \
    --limit=1 > /dev/null 2>&1
    echo checked
  register: cloudrun_sa_key_secret
  changed_when: "'checked' in cloudrun_sa_key_secret.stdout"

- name: Create cloudrun service account if not already exists
  ansible.builtin.shell: |
    if ! gcloud iam service-accounts describe --project "{{ gcp.project }}" "{{ cloudrun_sa_id }}" > /dev/null 2>&1; then
      gcloud iam service-accounts create "{{ cloudrun_sa_user }}" \
        --description "Service Account with permission to execute cloudrun jobs" \
        --display-name "cloudrun service account" \
        --project "{{ gcp.project }}"
      echo service account created
    fi
  register: create_sa_result
  changed_when: "'service account created' in create_sa_result.stdout"

- name: Create a role for cloudrun service account if not already exists
  ansible.builtin.shell: |
    if ! gcloud iam roles describe {{ cloudrun_job_role }} --project ansible-eg > /dev/null 2>&1; then
      gcloud iam roles create {{ cloudrun_job_role }} \
      --title={{ cloudrun_job_role }} \
      --description="Role with permission to execute cloudrun jobs" \
      --project {{ gcp.project }} \
      --permissions=cloudscheduler.jobs.run,run.jobs.run,bigquery.jobs.create,bigquery.datasets.create,bigquery.datasets.get,bigquery.tables.create,bigquery.tables.updateData,storage.objects.get,storage.buckets.get
      # https://cloud.google.com/bigquery/docs/access-control
      # https://cloud.google.com/storage/docs/access-control/iam-permissions
      # https://cloud.google.com/iam/docs/permissions-reference
      echo role created
    fi
  register: create_cloudrun_job_role_res
  changed_when: "'role created' in create_cloudrun_job_role_res.stdout"

- name: Grant cloudrun service account required roles
  ansible.builtin.command: >
    gcloud projects add-iam-policy-binding {{ gcp.project }} \
      --member=serviceAccount:{{ cloudrun_sa_id }} \
      --role projects/{{ gcp.project }}/roles/{{ cloudrun_job_role }}
  # ansible.builtin.shell: |
  #     gcloud iam service-account add-iam-policy-binding {{ cloudrun_sa_id }} \
  #     --member=serviceAccount:{{ cloudrun_sa_id }} \
  #     --role projects/{{ gcp.project }}/roles/{{ cloudrun_job_role }}
  register: grant_cloudrun_sa_role_res
  changed_when: "'Updated IAM policy' in grant_cloudrun_sa_role_res.stdout"

- name: Create Cloud Run Job if not already exists
  ansible.builtin.shell: |
    if ! gcloud beta run jobs describe {{ cloudrun_job_id }} --project {{ gcp.project }} --region {{ gcp.region }} > /dev/null 2>&1; then
    gcloud beta run jobs create {{ cloudrun_job_id }} \
    --image docker.io/toransahu/cloudrun-job:latest \
      --tasks 1 \
      --set-env-vars SLEEP_MS=10000 \
      --set-env-vars FAIL_RATE=0.5 \
      --max-retries 3 \
      --region {{ gcp.region }} \
      --service-account {{ cloudrun_sa_id }}
      echo job created
    fi
  register: create_cloudrun_job_res
  changed_when: "'job created' in create_cloudrun_job_res.stdout"

- name: Schedule Cloud Run Job if not already exists
  ansible.builtin.shell: |
    if ! gcloud scheduler describe {{ cloudrun_job_id }}-schedule-job --project {{ gcp.project }} --location {{ gcp.region }} > /dev/null 2>&1; then
      gcloud scheduler jobs create http {{ cloudrun_job_id }}-schedule-job \
        --location={{ gcp.region }} \
        --description="Run the cloudrun job at 00:01 UTC" \
        --uri="https://{{ gcp.region }}-run.googleapis.com/apis/run.googleapis.com/v1/namespaces/{{ gcp.project }}/jobs/{{ cloudrun_job_id }}:run" \
        --http-method="post" \
        --headers="Content-Type=application/octet-stream,User-Agent=Google-Cloud-Scheduler" \
        --schedule="1 0 * * *" \
        --time-zone="Etc/UTC" \
        --message-body='{}' \
        --oauth-service-account-email={{ cloudrun_sa_id }} \
        --oauth-token-scope="https://www.googleapis.com/auth/cloud-platform"
        echo job created
    fi
  register: schedule_cloudrun_job_res
  changed_when: "'job created' in schedule_cloudrun_job_res.stdout"
